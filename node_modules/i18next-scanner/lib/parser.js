'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-console: 0 */


var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    debug: false, // verbose logging

    sort: false, // sort keys in alphabetical order

    attr: { // HTML attributes to parse
        list: ['data-i18n'],
        extensions: ['.html', '.htm']
    },

    func: { // function names to parse
        list: ['i18next.t', 'i18n.t'],
        extensions: ['.js', '.jsx']
    },

    lngs: ['en'], // array of supported languages
    fallbackLng: 'en', // language to lookup key if not found while calling `parser.get(key, { lng: '' })`

    ns: [], // string or array of namespaces

    defaultNs: 'translation', // default namespace used if not passed to translation function

    defaultValue: '', // default value used if not passed to `parser.set`

    // resource
    resource: {
        loadPath: 'i18n/{{lng}}/{{ns}}.json', // the source resource path (relative to current working directory)
        savePath: 'i18n/{{lng}}/{{ns}}.json', // the target resource path (relative to the path specified with `gulp.dest(path)`)
        jsonIndent: 2
    },

    keySeparator: '.', // char to separate keys
    nsSeparator: ':', // char to split namespace from key

    // interpolation options
    interpolation: {
        prefix: '{{', // prefix for interpolation
        suffix: '}}' // suffix for interpolation
    }
};

var transformOptions = function transformOptions(options) {
    // Attribute
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'attr.list'))) {
        _lodash2.default.set(options, 'attr.list', defaults.attr.list);
    }
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'attr.extensions'))) {
        _lodash2.default.set(options, 'attr.extensions', defaults.attr.extensions);
    }

    // Function
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'func.list'))) {
        _lodash2.default.set(options, 'func.list', defaults.func.list);
    }

    // Resource
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'func.extensions'))) {
        _lodash2.default.set(options, 'func.extensions', defaults.func.extensions);
    }
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'resource.loadPath'))) {
        _lodash2.default.set(options, 'resource.loadPath', defaults.resource.loadPath);
    }
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'resource.savePath'))) {
        _lodash2.default.set(options, 'resource.savePath', defaults.resource.savePath);
    }
    if (_lodash2.default.isUndefined(_lodash2.default.get(options, 'resource.jsonIndent'))) {
        _lodash2.default.set(options, 'resource.jsonIndent', defaults.resource.jsonIndent);
    }

    // Accept both nsseparator or nsSeparator
    if (!_lodash2.default.isUndefined(options.nsseparator)) {
        options.nsSeparator = options.nsseparator;
        delete options.nsseparator;
    }
    // Allowed only string or false
    if (!_lodash2.default.isString(options.nsSeparator)) {
        options.nsSeparator = false;
    }

    // Accept both keyseparator or keySeparator
    if (!_lodash2.default.isUndefined(options.keyseparator)) {
        options.keySeparator = options.keyseparator;
        delete options.keyseparator;
    }
    // Allowed only string or false
    if (!_lodash2.default.isString(options.keySeparator)) {
        options.keySeparator = false;
    }

    if (!_lodash2.default.isArray(options.ns)) {
        options.ns = [options.ns];
    }

    options.ns = (0, _lodash2.default)(options.ns.concat(options.defaultNs)).flatten().union().value();

    return options;
};

/**
* Creates a new parser
* @constructor
*/

var Parser = function () {
    function Parser(options) {
        var _this = this;

        _classCallCheck(this, Parser);

        this.options = _lodash2.default.assign({}, defaults);
        this.resStore = {};

        this.options = transformOptions(_lodash2.default.extend({}, this.options, options));

        var lngs = this.options.lngs;
        var namespaces = this.options.ns;

        lngs.forEach(function (lng) {
            _this.resStore[lng] = _this.resStore[lng] || {};
            namespaces.forEach(function (ns) {
                var resPath = _this.formatResourceLoadPath(lng, ns);
                _this.resStore[lng][ns] = {};
                try {
                    var stat = _fs2.default.statSync(resPath);
                    if (stat.isFile()) {
                        _this.resStore[lng][ns] = JSON.parse(_fs2.default.readFileSync(resPath, 'utf-8'));
                    }
                } catch (err) {
                    _this.debuglog('Unable to load ' + JSON.stringify(resPath));
                }
            });
        });

        this.debuglog('[i18next-scanner] Parser(options): ' + JSON.stringify(this.options));
    }

    _createClass(Parser, [{
        key: 'debuglog',
        value: function debuglog() {
            var debug = this.options.debug;

            if (!!debug) {
                for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                console.log.apply(this, args);
            }
        }
    }, {
        key: 'formatResourceLoadPath',
        value: function formatResourceLoadPath(lng, ns) {
            var options = this.options;
            var regex = {
                lng: new RegExp(_lodash2.default.escapeRegExp(options.interpolation.prefix + 'lng' + options.interpolation.suffix), 'g'),
                ns: new RegExp(_lodash2.default.escapeRegExp(options.interpolation.prefix + 'ns' + options.interpolation.suffix), 'g')
            };
            return options.resource.loadPath.replace(regex.lng, lng).replace(regex.ns, ns);
        }
    }, {
        key: 'formatResourceSavePath',
        value: function formatResourceSavePath(lng, ns) {
            var options = this.options;
            var regex = {
                lng: new RegExp(_lodash2.default.escapeRegExp(options.interpolation.prefix + 'lng' + options.interpolation.suffix), 'g'),
                ns: new RegExp(_lodash2.default.escapeRegExp(options.interpolation.prefix + 'ns' + options.interpolation.suffix), 'g')
            };
            return options.resource.savePath.replace(regex.lng, lng).replace(regex.ns, ns);
        }
        // i18next.t('ns:foo.bar') // matched
        // i18next.t("ns:foo.bar") // matched
        // i18next.t('ns:foo.bar') // matched
        // i18next.t("ns:foo.bar", { count: 1 }); // matched
        // i18next.t("ns:foo.bar" + str); // not matched

    }, {
        key: 'parseFuncFromString',
        value: function parseFuncFromString(content) {
            var _this2 = this;

            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var customHandler = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            if (_lodash2.default.isFunction(opts)) {
                customHandler = opts;
                opts = {};
            }

            var funcs = opts.list || this.options.func.list;
            var matchPattern = (0, _lodash2.default)(funcs).map(function (func) {
                return '(?:' + func + ')';
            }).value().join('|').replace(/\./g, '\\.');
            var pattern = '(?:(?:^[\s]*)|[^a-zA-Z0-9_])(?:' + matchPattern + ')\\(("(?:[^"\\\\]|\\\\.)*"|\'(?:[^\'\\\\]|\\\\.)*\')\\s*[\\,\\)]';
            var results = content.match(new RegExp(pattern, 'gim')) || [];
            results.forEach(function (result) {
                var r = result.match(new RegExp(pattern));
                if (!r) {
                    return;
                }

                var key = _lodash2.default.trim(r[1], '\'"');

                if (customHandler) {
                    customHandler(key);
                    return;
                }

                _this2.set(key);
            });

            return this;
        }
        // Parses translation keys from `data-i18n` attribute in HTML
        // <div data-i18n="[attr]ns:foo.bar;[attr]ns:foo.baz">
        // </div>

    }, {
        key: 'parseAttrFromString',
        value: function parseAttrFromString(content) {
            var _this3 = this;

            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var customHandler = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

            if (_lodash2.default.isFunction(opts)) {
                customHandler = opts;
                opts = {};
            }

            var attrs = opts.list || this.options.attr.list;
            var matchPattern = (0, _lodash2.default)(attrs).map(function (attr) {
                return '(?:' + attr + ')';
            }).value().join('|').replace(/\./g, '\\.');
            var pattern = '(?:(?:^[\s]*)|[^a-zA-Z0-9_])(?:' + matchPattern + ')=("[^"]*"|\'[^\']*\')';
            var results = content.match(new RegExp(pattern, 'gim')) || [];
            results.forEach(function (result) {
                var r = result.match(new RegExp(pattern));
                if (!r) {
                    return;
                }

                var attr = _lodash2.default.trim(r[1], '\'"');
                var keys = attr.indexOf(';') >= 0 ? attr.split(';') : [attr];
                keys.forEach(function (key) {
                    //let attr = 'text';
                    key = _lodash2.default.trim(key);
                    if (key.length === 0) {
                        return;
                    }
                    if (key.indexOf('[') === 0) {
                        var parts = key.split(']');
                        key = parts[1];
                        //attr = parts[0].substr(1, parts[0].length - 1);
                    }
                    if (key.indexOf(';') === key.length - 1) {
                        key = key.substr(0, key.length - 2);
                    }

                    if (customHandler) {
                        customHandler(key);
                        return;
                    }

                    _this3.set(key);
                });
            });

            return this;
        }
        // Get the value of a translation key or the whole resource store containing translation information
        // @param {string} [key] The translation key
        // @param {object} [opts] The opts object
        // @param {boolean} [opts.sort] True to sort object by key
        // @param {boolean} [opts.lng] The language to use
        // @return {object}

    }, {
        key: 'get',
        value: function get(key) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            if (_lodash2.default.isObject(key)) {
                opts = key;
                key = undefined;
            }

            var resStore = _lodash2.default.assign({}, this.resStore);

            if (!!opts.sort) {
                // sort by key
                Object.keys(resStore).forEach(function (lng) {
                    var namespaces = resStore[lng];

                    Object.keys(namespaces).forEach(function (ns) {
                        resStore[lng][ns] = (0, _lodash2.default)(namespaces[ns]).toPairs().sortBy(function (pair) {
                            return pair[0];
                        }).reduce(function (memo, pair) {
                            var _key = pair[0];
                            var _value = pair[1];
                            memo[_key] = _value;
                            return memo;
                        }, {});

                        // Note. The reduce method is not chainable by default
                    });
                });
            }

            if (!_lodash2.default.isUndefined(key)) {
                var options = this.options;
                var ns = options.defaultNs;

                // http://i18next.com/translate/keyBasedFallback/
                // Set nsSeparator and keySeparator to false if you prefer
                // having keys as the fallback for translation.
                // i18next.init({
                //   nsSeparator: false,
                //   keySeparator: false
                // })

                if (_lodash2.default.isString(options.nsSeparator) && key.indexOf(options.nsSeparator) > -1) {
                    var parts = key.split(options.nsSeparator);
                    ns = parts[0];
                    key = parts[1];
                }

                var keys = _lodash2.default.isString(options.keySeparator) ? key.split(options.keySeparator) : [key];
                var lng = opts.lng ? opts.lng : options.fallbackLng;
                var namespaces = resStore[lng] || {};

                var value = namespaces[ns];
                var x = 0;
                while (keys[x]) {
                    value = value && value[keys[x]];
                    x++;
                }

                return value;
            }

            return resStore;
        }
        // Set translation key with an optional defaultValue to i18n resource store
        // @param {string} key The translation key
        // @param {string} [defaultValue] The key's value

    }, {
        key: 'set',
        value: function set(key, defaultValue) {
            var _this4 = this;

            var options = this.options;

            var ns = options.defaultNs;
            console.assert(_lodash2.default.isString(ns) && !!ns.length, 'ns is not a valid string', ns);

            // http://i18next.com/translate/keyBasedFallback/
            // Set nsSeparator and keySeparator to false if you prefer
            // having keys as the fallback for translation.
            // i18next.init({
            //   nsSeparator: false,
            //   keySeparator: false
            // })

            if (_lodash2.default.isString(options.nsSeparator) && key.indexOf(options.nsSeparator) > -1) {
                var parts = key.split(options.nsSeparator);
                ns = parts[0];
                key = parts[1];
            }

            var keys = _lodash2.default.isString(options.keySeparator) ? key.split(options.keySeparator) : [key];
            options.lngs.forEach(function (lng) {
                var value = _this4.resStore[lng] && _this4.resStore[lng][ns];
                var x = 0;

                while (keys[x]) {
                    value = value && value[keys[x]];
                    x++;
                }

                if (!_lodash2.default.isUndefined(value)) {
                    // Found a value associated with the key
                    var lookupKey = '[' + lng + '][' + ns + '][' + keys.join('][') + ']';
                    _this4.debuglog('Found a value %s associated with the key %s in %s.', JSON.stringify(_lodash2.default.get(_this4.resStore, lookupKey)), JSON.stringify(keys.join(options.keySeparator || '')), JSON.stringify(_this4.formatResourceLoadPath(lng, ns)));
                } else if (_lodash2.default.isObject(_this4.resStore[lng][ns])) {
                    (function () {
                        // Adding a new entry
                        var res = _this4.resStore[lng][ns];
                        Object.keys(keys).forEach(function (index) {
                            var elem = keys[index];
                            if (index >= keys.length - 1) {
                                if (_lodash2.default.isUndefined(defaultValue)) {
                                    res[elem] = _lodash2.default.isFunction(options.defaultValue) ? options.defaultValue(lng, ns, elem) : options.defaultValue;
                                } else {
                                    res[elem] = defaultValue;
                                }
                            } else {
                                res[elem] = res[elem] || {};
                                res = res[elem];
                            }
                        });
                        var lookupKey = '[' + lng + '][' + ns + '][' + keys.join('][') + ']';
                        _this4.debuglog('Adding a new entry {%s:%s} to %s.', JSON.stringify(keys.join(options.keySeparator || '')), JSON.stringify(_lodash2.default.get(_this4.resStore, lookupKey)), JSON.stringify(_this4.formatResourceLoadPath(lng, ns)));
                    })();
                } else {
                    // skip the namespace that is not defined in the i18next options
                    console.log('The namespace "' + ns + '" does not exist:', { key: key, defaultValue: defaultValue });
                }
            });
        }
        // Returns a JSON string containing translation information
        // @param {object} [options] The options object
        // @param {boolean} [options.sort] True to sort object by key
        // @param {function|string[]|number[]} [options.replacer] The same as the JSON.stringify()
        // @param {string|number} [options.space] The same as the JSON.stringify() method
        // @return {string}

    }, {
        key: 'toJSON',
        value: function toJSON() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var replacer = options.replacer;
            var space = options.space;


            return JSON.stringify(this.getResourceStore(options), replacer, space);
        }
    }]);

    return Parser;
}();

exports.default = Parser;